{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "subdomain-cookies-supabase-nextjs",
  "type": "registry:block",
  "title": "Subdomain Cookies - Supabase + Next.js",
  "author": "thedevdavid <https://github.com/thedevdavid>",
  "description": "Set up authentication cookies across subdomains - Supabase + Next.js",
  "dependencies": [
    "@supabase/ssr",
    "@supabase/ssr",
    "clsx",
    "tailwind-merge",
    "@radix-ui/react-label",
    "@radix-ui/react-slot",
    "class-variance-authority",
    "@radix-ui/react-tabs",
    "lucide-react"
  ],
  "registryDependencies": [
    "card",
    "button",
    "input",
    "label",
    "tabs"
  ],
  "files": [
    {
      "path": "src/registry/new-york/blocks/subdomain-cookies/supabase-nextjs/app/auth/page.tsx",
      "content": "import { AuthCard } from \"@/registry/new-york/blocks/subdomain-cookies/supabase-nextjs/components/auth-card\";\n\nexport default async function Page() {\n  return (\n    <div className=\"mx-auto w-full max-w-2xl px-4\">\n      <AuthCard />\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/auth/page.tsx"
    },
    {
      "path": "src/registry/new-york/blocks/subdomain-cookies/supabase-nextjs/app/auth/confirm/route.ts",
      "content": "import { type EmailOtpType } from \"@supabase/supabase-js\";\nimport { type NextRequest } from \"next/server\";\nimport { createClient } from \"@/registry/new-york/blocks/subdomain-cookies/supabase-nextjs/lib/supabase/server\";\nimport { redirect } from \"next/navigation\";\n\nexport async function GET(request: NextRequest) {\n  const { searchParams } = new URL(request.url);\n  const token_hash = searchParams.get(\"token_hash\");\n  const type = searchParams.get(\"type\") as EmailOtpType | null;\n  const next = searchParams.get(\"next\") ?? \"/\";\n\n  if (token_hash && type) {\n    const supabase = await createClient();\n\n    const { error } = await supabase.auth.verifyOtp({\n      type,\n      token_hash,\n    });\n    if (!error) {\n      // redirect user to specified redirect URL or root of app\n      redirect(next);\n    }\n  }\n\n  // redirect the user to an error page with some instructions\n  redirect(\"/error\");\n}\n",
      "type": "registry:page",
      "target": "app/auth/confirm/route.ts"
    },
    {
      "path": "src/registry/new-york/blocks/subdomain-cookies/supabase-nextjs/app/auth/logout/route.ts",
      "content": "import { createClient } from \"@/registry/new-york/blocks/subdomain-cookies/supabase-nextjs/lib/supabase/server\";\nimport { COOKIE_OPTIONS } from \"@/registry/new-york/blocks/subdomain-cookies/supabase-nextjs/lib/supabase/auth-config\";\nimport { redirect } from \"next/navigation\";\nimport { cookies } from \"next/headers\";\n\nexport async function POST(request: Request) {\n  const cookieStore = await cookies();\n  const supabase = await createClient();\n  const { error } = await supabase.auth.signOut();\n\n  if (error) {\n    // redirect the user to an error page with some instructions\n    redirect(\"/error\");\n  }\n\n  cookieStore.delete(COOKIE_OPTIONS.name ?? \"\");\n\n  redirect(\"/\");\n}\n",
      "type": "registry:page",
      "target": "app/auth/logout/route.ts"
    },
    {
      "path": "src/registry/new-york/blocks/subdomain-cookies/supabase-nextjs/lib/middleware-config.ts",
      "content": "import { NextRequest } from \"next/server\";\n\nexport interface SubdomainConfig {\n  // The subdomain pattern (e.g., \"app\", \"auth\", \"admin\")\n  subdomain: string;\n  // Routes that require authentication for this subdomain\n  protectedRoutes?: string[];\n  // Routes that should be public even if globally protected\n  publicRoutes?: string[];\n  // Custom redirect path for unauthenticated users\n  loginPath?: string;\n  // Minimum required role for this subdomain\n  requiredRole?: string;\n  // Custom logic to run for this subdomain\n  customHandler?: (request: NextRequest) => Promise<Response | void>;\n}\n\nexport interface MiddlewareConfig {\n  // List of subdomain configurations\n  subdomains: SubdomainConfig[];\n  // Default protected routes (apply to all subdomains unless overridden)\n  defaultProtectedRoutes?: string[];\n  // Default public routes\n  defaultPublicRoutes?: string[];\n  // Default login path\n  defaultLoginPath?: string;\n  // Main domain (without subdomain)\n  mainDomain: string;\n  // Enable debug logging\n  debug?: boolean;\n}\n\nexport function getSubdomain(\n  request: NextRequest,\n  mainDomain: string\n): string | null {\n  const hostname = request.headers.get(\"host\") || \"\";\n\n  // Handle localhost development\n  if (hostname.includes(\"localhost\") || hostname.includes(\"127.0.0.1\")) {\n    // For localhost, we might use ports to simulate subdomains\n    // e.g., app.localhost:3000, auth.localhost:3001\n    const parts = hostname.split(\".\");\n    if (parts.length > 1 && parts[0] !== \"www\") {\n      return parts[0];\n    }\n    return null;\n  }\n\n  // Handle production domains\n  const regex = new RegExp(`^([^.]+)\\\\.${mainDomain.replace(\".\", \"\\\\.\")}`, \"i\");\n  const match = hostname.match(regex);\n\n  if (match && match[1] !== \"www\") {\n    return match[1];\n  }\n\n  return null;\n}\n\nexport function matchesRoute(pathname: string, routes: string[]): boolean {\n  return routes.some((route) => {\n    // Exact match\n    if (route === pathname) return true;\n\n    // Wildcard match (e.g., /admin/* matches /admin/users)\n    if (route.endsWith(\"/*\")) {\n      const baseRoute = route.slice(0, -2);\n      return pathname.startsWith(baseRoute);\n    }\n\n    // Regex match\n    if (route.startsWith(\"^\") && route.endsWith(\"$\")) {\n      const regex = new RegExp(route);\n      return regex.test(pathname);\n    }\n\n    return false;\n  });\n}\n\nexport function getSubdomainConfig(\n  subdomain: string | null,\n  config: MiddlewareConfig\n): SubdomainConfig | null {\n  if (!subdomain) return null;\n\n  return config.subdomains.find((s) => s.subdomain === subdomain) || null;\n}\n\nexport function isProtectedRoute(\n  pathname: string,\n  subdomain: string | null,\n  config: MiddlewareConfig\n): boolean {\n  const subdomainConfig = getSubdomainConfig(subdomain, config);\n\n  // Check subdomain-specific public routes first\n  const publicRoutes =\n    subdomainConfig?.publicRoutes || config.defaultPublicRoutes || [];\n  if (matchesRoute(pathname, publicRoutes)) {\n    return false;\n  }\n\n  // Check subdomain-specific protected routes\n  const protectedRoutes =\n    subdomainConfig?.protectedRoutes || config.defaultProtectedRoutes || [];\n  return matchesRoute(pathname, protectedRoutes);\n}\n\nexport function getLoginPath(\n  subdomain: string | null,\n  config: MiddlewareConfig\n): string {\n  const subdomainConfig = getSubdomainConfig(subdomain, config);\n  return subdomainConfig?.loginPath || config.defaultLoginPath || \"/login\";\n}\n\nexport const defaultMiddlewareConfig: MiddlewareConfig = {\n  mainDomain: process.env.NEXT_PUBLIC_DOMAIN || \"example.com\",\n  subdomains: [\n    {\n      subdomain: \"app\",\n      protectedRoutes: [\"/*\"],\n      publicRoutes: [\"/\", \"/features\", \"/pricing\"],\n      loginPath: \"/auth/login\",\n      requiredRole: \"user\",\n    },\n    {\n      subdomain: \"admin\",\n      protectedRoutes: [\"/*\"],\n      publicRoutes: [\"/login\"],\n      loginPath: \"/login\",\n      requiredRole: \"admin\",\n      customHandler: async (request) => {\n        // Custom logic for admin subdomain\n        const userRole = request.headers.get(\"x-user-role\");\n        if (userRole !== \"admin\") {\n          return new Response(\"Forbidden\", { status: 403 });\n        }\n      },\n    },\n    {\n      subdomain: \"auth\",\n      protectedRoutes: [\"/account/*\", \"/settings/*\"],\n      publicRoutes: [\"/*\"],\n      loginPath: \"/login\",\n    },\n    {\n      subdomain: \"api\",\n      protectedRoutes: [\"/v1/*\"],\n      publicRoutes: [\"/health\", \"/status\"],\n      customHandler: async (request) => {\n        // Add API-specific headers\n        const response = new Response();\n        response.headers.set(\"X-API-Version\", \"1.0\");\n        return response;\n      },\n    },\n  ],\n  defaultProtectedRoutes: [\"/dashboard/*\", \"/account/*\", \"/settings/*\"],\n  defaultPublicRoutes: [\"/\", \"/login\", \"/signup\", \"/forgot-password\"],\n  defaultLoginPath: \"/login\",\n  debug: process.env.NODE_ENV === \"development\",\n};\n",
      "type": "registry:lib",
      "target": "utils/middleware-config.ts"
    },
    {
      "path": "src/registry/new-york/blocks/subdomain-cookies/supabase-nextjs/lib/middleware.ts",
      "content": "import {\n  createResponse,\n  updateSessionWithConfig,\n} from \"@/registry/new-york/blocks/subdomain-cookies/supabase-nextjs/lib/supabase/middleware-enhanced\";\nimport {\n  getSubdomain,\n  getSubdomainConfig,\n  isProtectedRoute,\n  MiddlewareConfig,\n  getLoginPath,\n} from \"@/registry/new-york/blocks/subdomain-cookies/supabase-nextjs/lib/middleware-config\";\nimport type { NextRequest } from \"next/server\";\nimport { NextResponse } from \"next/server\";\n\nconst middlewareConfig: MiddlewareConfig = {\n  mainDomain: process.env.NEXT_PUBLIC_DOMAIN || \"example.com\",\n  subdomains: [\n    {\n      // Main application subdomain\n      subdomain: \"app\",\n      protectedRoutes: [\n        \"/dashboard/*\",\n        \"/projects/*\",\n        \"/settings/*\",\n        \"/billing/*\",\n      ],\n      publicRoutes: [\n        \"/\",\n        \"/features\",\n        \"/pricing\",\n        \"/login\",\n        \"/signup\",\n        \"/forgot-password\",\n      ],\n      loginPath: \"/login\",\n    },\n    {\n      // Admin portal subdomain\n      subdomain: \"admin\",\n      protectedRoutes: [\"/*\"], // All routes protected\n      publicRoutes: [\"/login\"],\n      loginPath: \"/login\",\n      requiredRole: \"admin\",\n      customHandler: async (request: NextRequest) => {\n        // Add admin-specific security headers\n        const response = NextResponse.next();\n        response.headers.set(\"X-Frame-Options\", \"DENY\");\n        response.headers.set(\"X-Content-Type-Options\", \"nosniff\");\n        return response;\n      },\n    },\n    {\n      // Authentication subdomain\n      subdomain: \"auth\",\n      protectedRoutes: [\"/profile/*\", \"/security/*\", \"/sessions/*\"],\n      publicRoutes: [\n        \"/\",\n        \"/login\",\n        \"/signup\",\n        \"/forgot-password\",\n        \"/reset-password\",\n        \"/verify-email\",\n      ],\n      loginPath: \"/login\",\n    },\n    {\n      // API subdomain\n      subdomain: \"api\",\n      protectedRoutes: [\"/v1/*\", \"/v2/*\"],\n      publicRoutes: [\"/\", \"/health\", \"/status\", \"/docs\", \"/docs/*\"],\n      customHandler: async (request: NextRequest) => {\n        // Add CORS headers for API\n        const response = NextResponse.next();\n        response.headers.set(\"Access-Control-Allow-Origin\", \"*\");\n        response.headers.set(\n          \"Access-Control-Allow-Methods\",\n          \"GET, POST, PUT, DELETE, OPTIONS\"\n        );\n        response.headers.set(\n          \"Access-Control-Allow-Headers\",\n          \"Content-Type, Authorization\"\n        );\n        return response;\n      },\n    },\n    {\n      // Documentation subdomain\n      subdomain: \"docs\",\n      protectedRoutes: [\"/admin/*\"], // Only admin section protected\n      publicRoutes: [\"/*\"], // Everything else is public\n      loginPath: \"/login\",\n    },\n  ],\n  defaultProtectedRoutes: [\"/account/*\", \"/settings/*\", \"/api/user/*\"],\n  defaultPublicRoutes: [\n    \"/\",\n    \"/login\",\n    \"/signup\",\n    \"/forgot-password\",\n    \"/reset-password\",\n    \"/api/auth/*\",\n    \"/_next/*\",\n    \"/favicon.ico\",\n  ],\n  defaultLoginPath: \"/login\",\n  debug: process.env.NODE_ENV === \"development\",\n};\n\nexport default async function middleware(request: NextRequest) {\n  const pathname = request.nextUrl.pathname;\n  const subdomain = getSubdomain(request, middlewareConfig.mainDomain);\n\n  if (middlewareConfig.debug) {\n    console.log(`[Middleware] Subdomain: ${subdomain}, Path: ${pathname}`);\n  }\n\n  const { supabaseResponse, user } = await updateSessionWithConfig({\n    request,\n    config: middlewareConfig,\n    subdomain: subdomain || undefined,\n  });\n\n  // Get subdomain configuration\n  const subdomainConfig = getSubdomainConfig(subdomain, middlewareConfig);\n\n  // Run custom handler if available\n  if (subdomainConfig?.customHandler) {\n    const customResponse = await subdomainConfig.customHandler(request);\n    if (customResponse) {\n      return customResponse;\n    }\n  }\n  // Check if route is protected\n  const isProtected = isProtectedRoute(pathname, subdomain, middlewareConfig);\n\n  if (middlewareConfig.debug) {\n    console.log(\n      `[Middleware] Protected: ${isProtected}, User: ${user?.email || \"none\"}`\n    );\n  }\n\n  // Handle protected routes\n  if (isProtected && !user) {\n    const loginPath = getLoginPath(subdomain, middlewareConfig);\n    const url = request.nextUrl.clone();\n    url.pathname = loginPath;\n\n    // Preserve the original URL as a redirect parameter\n    url.searchParams.set(\"redirectTo\", pathname);\n\n    return createResponse(\"redirect\", request, supabaseResponse, {\n      path: url.toString(),\n    });\n  }\n\n  // Check role requirements\n  if (user && subdomainConfig?.requiredRole) {\n    const userRole = user.role || \"user\";\n\n    if (userRole !== subdomainConfig.requiredRole && userRole !== \"admin\") {\n      // User doesn't have required role\n      const url = request.nextUrl.clone();\n      url.pathname = \"/unauthorized\";\n      return createResponse(\"redirect\", request, supabaseResponse, {\n        path: url.toString(),\n      });\n    }\n  }\n\n  // Handle subdomain-specific redirects\n  if (subdomain && user) {\n    // Example: Redirect admin users to admin subdomain\n    if (\n      user.role === \"admin\" &&\n      subdomain !== \"admin\" &&\n      pathname.startsWith(\"/admin\")\n    ) {\n      const url = request.nextUrl.clone();\n      url.hostname = `admin.${middlewareConfig.mainDomain}`;\n      return createResponse(\"redirect\", request, supabaseResponse, {\n        path: url.toString(),\n      });\n    }\n  }\n\n  const response = createResponse(\"next\", request, supabaseResponse);\n  return response;\n}\n\nexport const config = {\n  matcher: [\n    \"/((?!_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)\",\n  ],\n};\n",
      "type": "registry:lib",
      "target": "middleware.ts"
    },
    {
      "path": "src/registry/new-york/blocks/subdomain-cookies/supabase-nextjs/components/auth-card.tsx",
      "content": "import { createClient } from \"@/registry/new-york/blocks/subdomain-cookies/supabase-nextjs/lib/supabase/server\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/registry/new-york/ui/card\";\nimport { Label } from \"@/registry/new-york/ui/label\";\nimport { Input } from \"@/registry/new-york/ui/input\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport {\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from \"@/registry/new-york/ui/tabs\";\nimport { redirect } from \"next/navigation\";\nimport { GalleryVerticalEnd } from \"lucide-react\";\n\nexport async function AuthCard() {\n  return (\n    <Tabs defaultValue=\"magic-link\" className=\"w-[400px]\">\n      <TabsList className=\"grid w-full grid-cols-2\">\n        <TabsTrigger value=\"magic-link\">Magic Link</TabsTrigger>\n        <TabsTrigger value=\"email-password\">Email Password</TabsTrigger>\n      </TabsList>\n      <TabsContent value=\"magic-link\">\n        <MagicLinkForm />\n      </TabsContent>\n      <TabsContent value=\"email-password\">\n        <EmailPasswordForm />\n      </TabsContent>\n    </Tabs>\n  );\n}\n\nexport function EmailPasswordForm() {\n  const loginWithEmailPassword = async (formData: FormData) => {\n    \"use server\";\n    const supabase = await createClient();\n    const { data, error } = await supabase.auth.signInWithPassword({\n      email: formData.get(\"email\") as string,\n      password: formData.get(\"password\") as string,\n    });\n\n    if (error) {\n      console.error(error);\n    }\n\n    redirect(\"/\");\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-2xl\">Login</CardTitle>\n        <CardDescription>\n          Enter your email below to login to your account\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <form>\n          <div className=\"flex flex-col gap-6\">\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"m@example.com\"\n                required\n              />\n            </div>\n            <div className=\"grid gap-2\">\n              <div className=\"flex items-center\">\n                <Label htmlFor=\"password\">Password</Label>\n                <a\n                  href=\"#\"\n                  className=\"ml-auto inline-block text-sm underline-offset-4 hover:underline\"\n                >\n                  Forgot your password?\n                </a>\n              </div>\n              <Input id=\"password\" type=\"password\" required />\n            </div>\n            <Button\n              formAction={loginWithEmailPassword}\n              type=\"submit\"\n              className=\"w-full\"\n            >\n              Login\n            </Button>\n          </div>\n          <div className=\"mt-4 text-center text-sm\">\n            Don&apos;t have an account?{\" \"}\n            <a href=\"#\" className=\"underline underline-offset-4\">\n              Sign up\n            </a>\n          </div>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport function MagicLinkForm() {\n  const loginWithMagicLink = async (formData: FormData) => {\n    \"use server\";\n    const supabase = await createClient();\n    const { data, error } = await supabase.auth.signInWithOtp({\n      email: formData.get(\"email\") as string,\n    });\n    if (error) {\n      console.error(error);\n    }\n\n    redirect(\"/\");\n  };\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-2xl\">Login</CardTitle>\n        <CardDescription>\n          Enter your email below to login to your account\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <form>\n          <div className=\"flex flex-col gap-6\">\n            <div className=\"flex flex-col items-center gap-2\">\n              <a\n                href=\"#\"\n                className=\"flex flex-col items-center gap-2 font-medium\"\n              >\n                <div className=\"flex h-8 w-8 items-center justify-center rounded-md\">\n                  <GalleryVerticalEnd className=\"size-6\" />\n                </div>\n                <span className=\"sr-only\">Acme Inc.</span>\n              </a>\n              <h1 className=\"text-xl font-bold\">Welcome to Acme Inc.</h1>\n              <div className=\"text-center text-sm\">\n                Don&apos;t have an account?{\" \"}\n                <a href=\"#\" className=\"underline underline-offset-4\">\n                  Sign up\n                </a>\n              </div>\n            </div>\n            <div className=\"flex flex-col gap-6\">\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"m@example.com\"\n                  required\n                />\n              </div>\n              <Button\n                formAction={loginWithMagicLink}\n                type=\"submit\"\n                className=\"w-full\"\n              >\n                Login\n              </Button>\n            </div>\n          </div>\n        </form>\n        <div className=\"text-balance text-center text-xs text-muted-foreground [&_a]:underline [&_a]:underline-offset-4 hover:[&_a]:text-primary  \">\n          By clicking continue, you agree to our{\" \"}\n          <a href=\"#\">Terms of Service</a> and <a href=\"#\">Privacy Policy</a>.\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/auth-card.tsx"
    },
    {
      "path": "src/registry/new-york/blocks/subdomain-cookies/supabase-nextjs/lib/supabase/middleware.ts",
      "content": "import { createServerClient } from \"@supabase/ssr\";\nimport { NextResponse, type NextRequest } from \"next/server\";\nimport { COOKIE_OPTIONS } from \"@/registry/new-york/blocks/subdomain-cookies/supabase-nextjs/lib/supabase/auth-config\";\n\nexport async function updateSession(request: NextRequest) {\n  let supabaseResponse = NextResponse.next({\n    request,\n  });\n\n  const supabase = createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookieOptions: COOKIE_OPTIONS,\n      cookies: {\n        getAll() {\n          return request.cookies.getAll();\n        },\n        setAll(cookiesToSet) {\n          cookiesToSet.forEach(({ name, value, options }) =>\n            request.cookies.set(name, value)\n          );\n          supabaseResponse = NextResponse.next({\n            request,\n          });\n          cookiesToSet.forEach(({ name, value, options }) =>\n            supabaseResponse.cookies.set(name, value, options)\n          );\n        },\n      },\n    }\n  );\n\n  // Do not run code between createServerClient and\n  // supabase.auth.getUser(). A simple mistake could make it very hard to debug\n  // issues with users being randomly logged out.\n\n  // IMPORTANT: DO NOT REMOVE auth.getUser()\n\n  const {\n    data: { user },\n  } = await supabase.auth.getUser();\n\n  if (\n    !user &&\n    !request.nextUrl.pathname.startsWith(\"/login\") &&\n    !request.nextUrl.pathname.startsWith(\"/auth\")\n  ) {\n    // no user, potentially respond by redirecting the user to the login page\n    const url = request.nextUrl.clone();\n    url.pathname = \"/login\";\n    return NextResponse.redirect(url);\n  }\n\n  // IMPORTANT: You *must* return the supabaseResponse object as it is.\n  // If you're creating a new response object with NextResponse.next() make sure to:\n  // 1. Pass the request in it, like so:\n  //    const myNewResponse = NextResponse.next({ request })\n  // 2. Copy over the cookies, like so:\n  //    myNewResponse.cookies.setAll(supabaseResponse.cookies.getAll())\n  // 3. Change the myNewResponse object to fit your needs, but avoid changing\n  //    the cookies!\n  // 4. Finally:\n  //    return myNewResponse\n  // If this is not done, you may be causing the browser and server to go out\n  // of sync and terminate the user's session prematurely!\n\n  return supabaseResponse;\n}\n",
      "type": "registry:lib",
      "target": "utils/supabase/middleware.ts"
    },
    {
      "path": "src/registry/new-york/blocks/subdomain-cookies/supabase-nextjs/lib/supabase/server.ts",
      "content": "import { COOKIE_OPTIONS } from \"@/registry/new-york/blocks/subdomain-cookies/supabase-nextjs/lib/supabase/auth-config\";\nimport { createServerClient } from \"@supabase/ssr\";\nimport { cookies } from \"next/headers\";\n\nexport async function createClient() {\n  const cookieStore = await cookies();\n\n  return createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookieOptions: COOKIE_OPTIONS,\n      cookies: {\n        getAll() {\n          return cookieStore.getAll();\n        },\n        setAll(cookiesToSet) {\n          try {\n            cookiesToSet.forEach(({ name, value, options }) =>\n              cookieStore.set(name, value, options)\n            );\n          } catch {\n            // The `setAll` method was called from a Server Component.\n            // This can be ignored if you have middleware refreshing\n            // user sessions.\n          }\n        },\n      },\n    }\n  );\n}\n",
      "type": "registry:lib",
      "target": "utils/supabase/server.ts"
    },
    {
      "path": "src/registry/new-york/blocks/subdomain-cookies/supabase-nextjs/lib/supabase/client.ts",
      "content": "import { createBrowserClient } from \"@supabase/ssr\";\nimport { COOKIE_OPTIONS } from \"@/registry/new-york/blocks/subdomain-cookies/supabase-nextjs/lib/supabase/auth-config\";\n\nexport function createClient() {\n  return createBrowserClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookieOptions: COOKIE_OPTIONS,\n    }\n  );\n}\n",
      "type": "registry:lib",
      "target": "utils/supabase/client.ts"
    },
    {
      "path": "src/registry/new-york/blocks/subdomain-cookies/supabase-nextjs/lib/supabase/auth-config.ts",
      "content": "import type { CookieOptionsWithName } from \"@supabase/ssr\";\nimport { DEFAULT_COOKIE_OPTIONS } from \"@supabase/ssr\";\n\nexport const COOKIE_OPTIONS: CookieOptionsWithName = {\n  ...DEFAULT_COOKIE_OPTIONS,\n  name: \"auth_session\",\n  domain: process.env.COOKIE_DOMAIN ?? \".localhost\",\n  path: \"/\",\n  maxAge: 60 * 60 * 24 * 365, // 1 year\n  sameSite: \"lax\" as const,\n};\n",
      "type": "registry:lib",
      "target": "utils/supabase/auth-config.ts"
    },
    {
      "path": "src/registry/new-york/blocks/subdomain-cookies/supabase-nextjs/lib/supabase/middleware-enhanced.ts",
      "content": "import { createServerClient } from \"@supabase/ssr\";\nimport { NextResponse, type NextRequest } from \"next/server\";\nimport { COOKIE_OPTIONS } from \"@/registry/new-york/blocks/subdomain-cookies/supabase-nextjs/lib/supabase/auth-config\";\nimport { type MiddlewareConfig } from \"@/registry/new-york/blocks/subdomain-cookies/supabase-nextjs/lib/middleware-config\";\nimport { ResponseCookies } from \"next/dist/compiled/@edge-runtime/cookies\";\n\nexport async function updateSessionWithConfig({\n  request,\n  config,\n  subdomain,\n}: {\n  request: NextRequest;\n  config: MiddlewareConfig;\n  subdomain?: string;\n}) {\n  let supabaseResponse = NextResponse.next({\n    request,\n  });\n\n  const supabase = createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookieOptions: COOKIE_OPTIONS,\n      cookies: {\n        getAll() {\n          return request.cookies.getAll();\n        },\n        setAll(cookiesToSet) {\n          cookiesToSet.forEach(({ name, value, options }) =>\n            request.cookies.set(name, value)\n          );\n          supabaseResponse = NextResponse.next({\n            request,\n          });\n          cookiesToSet.forEach(({ name, value, options }) =>\n            supabaseResponse.cookies.set(name, value, options)\n          );\n        },\n      },\n    }\n  );\n\n  // IMPORTANT: Do not run code between createServerClient and auth.getUser()\n  const {\n    data: { user },\n  } = await supabase.auth.getUser();\n\n  // Add user info to headers for downstream use\n  if (user) {\n    supabaseResponse.headers.set(\"x-user-id\", user.id);\n    supabaseResponse.headers.set(\"x-user-email\", user.email || \"\");\n    supabaseResponse.headers.set(\"x-user-role\", user.role || \"user\");\n  }\n\n  // Add subdomain info to headers\n  if (subdomain) {\n    supabaseResponse.headers.set(\"x-subdomain\", subdomain);\n  }\n\n  return { supabaseResponse, user };\n}\n\n// Add Supabase cookies to the response\nexport function handleCookies(\n  response: NextResponse,\n  sourceCookies: ResponseCookies\n): NextResponse {\n  sourceCookies.getAll().forEach((cookie) => response.cookies.set(cookie));\n  return response;\n}\n\nexport function createResponse(\n  type: \"next\" | \"redirect\" | \"rewrite\",\n  request: NextRequest,\n  response: NextResponse,\n  options?: {\n    path?: string;\n    headers?: Record<string, string>;\n    status?: number;\n  }\n): NextResponse {\n  let res: NextResponse;\n\n  switch (type) {\n    case \"redirect\":\n      console.log(\"[Middleware] Redirecting to\", options?.path);\n      res = NextResponse.redirect(new URL(options?.path || \"/\", request.url));\n      break;\n    case \"rewrite\":\n      console.log(\"[Middleware] Rewriting to\", options?.path);\n      res = NextResponse.rewrite(new URL(options?.path || \"/\", request.url));\n      break;\n    default:\n      console.log(\"[Middleware] Next\");\n      res = options?.status\n        ? new NextResponse(null, { status: options.status })\n        : NextResponse.next();\n  }\n\n  if (options?.headers) {\n    Object.entries(options.headers).forEach(([key, value]) => {\n      res.headers.set(key, value);\n    });\n  }\n\n  return handleCookies(res, response.cookies);\n}\n",
      "type": "registry:lib",
      "target": "utils/supabase/middleware-enhanced.ts"
    },
    {
      "path": "src/registry/new-york/ui/card.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\"leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6 [.border-t]:pt-6\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n}\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "src/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "src/registry/new-york/ui/label.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        \"flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Label }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "src/registry/new-york/ui/input.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Input({ className, type, ...props }: React.ComponentProps<\"input\">) {\n  return (\n    <input\n      type={type}\n      data-slot=\"input\"\n      className={cn(\n        \"file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        \"focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n        \"aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Input }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "src/registry/new-york/ui/button.tsx",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "src/registry/new-york/ui/tabs.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\";\n\nimport { cn } from \"@/lib/utils\";\n\nfunction Tabs({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Root>) {\n  return (\n    <TabsPrimitive.Root\n      data-slot=\"tabs\"\n      className={cn(\"flex flex-col gap-2\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction TabsList({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.List>) {\n  return (\n    <TabsPrimitive.List\n      data-slot=\"tabs-list\"\n      className={cn(\n        \"bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]\",\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction TabsTrigger({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {\n  return (\n    <TabsPrimitive.Trigger\n      data-slot=\"tabs-trigger\"\n      className={cn(\n        \"data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction TabsContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Content>) {\n  return (\n    <TabsPrimitive.Content\n      data-slot=\"tabs-content\"\n      className={cn(\"flex-1 outline-none\", className)}\n      {...props}\n    />\n  );\n}\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent };\n",
      "type": "registry:ui",
      "target": ""
    }
  ],
  "categories": [
    "auth",
    "cookies",
    "nextjs",
    "supabase",
    "fullstack"
  ]
}