{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "hono-cloudflare-better-auth-server",
  "type": "registry:block",
  "title": "Hono + Cloudflare Workers + Better Auth",
  "author": "thedevdavid <https://github.com/thedevdavid>",
  "description": "Use Cloudflare Workers + Better Auth with Hono",
  "dependencies": [
    "hono",
    "better-auth",
    "resend",
    "drizzle-orm",
    "postgres",
    "pg"
  ],
  "registryDependencies": [
    "card",
    "button",
    "input",
    "label",
    "tabs"
  ],
  "files": [
    {
      "path": "src/registry/new-york/blocks/hono-cloudflare-better-auth/hono/env.ts",
      "content": "export interface Env {\n  HYPERDRIVE: Hyperdrive;\n  CORS_ORIGINS: string;\n  BETTER_AUTH_SECRET: string;\n  BETTER_AUTH_URL: string;\n  CLOUDFLARE_TURNSTILE_SECRET_KEY: string;\n  EMAIL_FROM_ADDRESS: string;\n  RESEND_API_KEY?: string;\n}\n",
      "type": "registry:lib",
      "target": "lib/env.ts"
    },
    {
      "path": "src/registry/new-york/blocks/hono-cloudflare-better-auth/hono/auth-schema.ts",
      "content": "export * from \"./db-schema\";\n",
      "type": "registry:lib",
      "target": "lib/auth-schema.ts"
    },
    {
      "path": "src/registry/new-york/blocks/hono-cloudflare-better-auth/hono/create-auth.ts",
      "content": "import * as schema from \"./db-schema\";\nimport { betterAuth } from \"better-auth\";\nimport { drizzleAdapter } from \"better-auth/adapters/drizzle\";\nimport { admin, captcha, magicLink } from \"better-auth/plugins\";\nimport { sendEmail, emailTemplates } from \"./lib/email/resend\";\nimport type { Env } from \"./env\";\n\nexport type BetterAuthInstance = ReturnType<typeof betterAuth>;\n\nexport const createBetterAuth = (\n  // Pass either a Drizzle db instance or Kysely dialect\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  db: any,\n  env: Env\n): BetterAuthInstance => {\n  const FROM_EMAIL = env.EMAIL_FROM_ADDRESS ?? \"team@mail.appname.com\";\n\n  // If db has a 'pool' property, it's a Kysely dialect - use it directly\n  // Otherwise, it's a Drizzle instance - use the drizzle adapter\n  const database = db.pool \n    ? db // Kysely dialect - Better Auth handles this automatically\n    : drizzleAdapter(db, {\n        schema,\n        provider: \"pg\",\n        usePlural: true,\n        debugLogs: true,\n      });\n\n  return betterAuth({\n    database,\n    appName: \"App Name\",\n    user: {\n      changeEmail: {\n        enabled: true,\n        sendChangeEmailVerification: async ({ user, newEmail, url, token }) => {\n          const template = emailTemplates.changeEmail(url, newEmail, user.name);\n          await sendEmail(env, {\n            to: newEmail,\n            ...template,\n          });\n        },\n      },\n      deleteUser: {\n        enabled: true,\n        sendDeleteAccountVerification: async ({ user, url, token }) => {\n          await sendEmail(env, {\n            to: user.email,\n            subject: \"Confirm account deletion\",\n            html: `\n              <h2>Confirm Account Deletion</h2>\n              <p>Hi ${user.name || \"there\"},</p>\n              <p>You requested to delete your account. This action cannot be undone.</p>\n              <p>Click the link below to confirm:</p>\n              <a href=\"${url}\">Delete Account</a>\n              <p>This link expires in 24 hours.</p>\n            `,\n            text: `Confirm account deletion\\n\\nHi ${user.name || \"there\"},\\n\\nYou requested to delete your account. This action cannot be undone.\\n\\nClick the link below to confirm:\\n${url}\\n\\nThis link expires in 24 hours.`,\n          });\n        },\n        beforeDelete: async (user) => {\n          console.log(\"Deleting user:\", user.id);\n          // Add any cleanup logic here\n        },\n        afterDelete: async () => {\n          // Add any post-deletion logic here\n        },\n      },\n    },\n    session: {\n      expiresIn: 60 * 60 * 24 * 90, // 90 days\n      preserveSessionInDatabase: true,\n      cookieCache: {\n        enabled: true,\n        maxAge: 5 * 60,\n      },\n    },\n    emailAndPassword: {\n      enabled: true,\n      requireEmailVerification: true,\n      minPasswordLength: 8,\n      autoSignIn: true,\n      sendResetPassword: async ({ user, url, token }) => {\n        const template = emailTemplates.resetPassword(url, user.name);\n        await sendEmail(env, {\n          to: user.email,\n          ...template,\n        });\n      },\n      resetPasswordTokenExpiresIn: 600, // 10 minutes\n    },\n    advanced: {\n      cookiePrefix: \"appname\",\n      useSecureCookies: true,\n      crossSubDomainCookies: {\n        enabled: true,\n        domains: [\".appname.com\", \".appname.dev\", \"localhost\", \"127.0.0.1\"],\n      },\n      defaultCookieAttributes: {\n        secure: true,\n        httpOnly: true,\n        sameSite: \"none\",\n        partitioned: true,\n      },\n      database: {\n        generateId: false,\n      },\n    },\n    baseURL: env.BETTER_AUTH_URL || \"https://appname.com\",\n    emailVerification: {\n      sendVerificationEmail: async ({ user, url, token }) => {\n        const template = emailTemplates.verifyEmail(url, user.name);\n        await sendEmail(env, {\n          to: user.email,\n          ...template,\n        });\n      },\n      sendOnSignUp: true,\n      autoSignInAfterVerification: true,\n      expiresIn: 600, // 10 minutes\n    },\n    databaseHooks: {\n      user: {\n        create: {\n          before: async (user) => {\n            // Modify user data before creation\n            return { data: { ...user } };\n          },\n          after: async () => {\n            // Create organization for user, so they have their personal workspace\n          },\n        },\n        update: {\n          before: async (userData) => {\n            // Modify user data before update\n            return { data: { ...userData, updatedAt: new Date() } };\n          },\n          after: async () => {\n            // Perform actions after user update\n          },\n        },\n      },\n      session: {\n        // Session hooks\n      },\n      account: {\n        // Account hooks\n      },\n      verification: {\n        // Verification hooks\n      },\n    },\n    trustedOrigins: env.CORS_ORIGINS?.split(',') || [\n      \"https://appname.com\",\n      \"https://app.appname.com\",\n      \"https://appname.dev\",\n      \"https://app.appname.dev\",\n      \"http://localhost:3000\",\n      \"http://127.0.0.1:3000\",\n      \"http://localhost:3001\",\n      \"http://127.0.0.1:3001\",\n    ],\n    rateLimit: {\n      window: 60,\n      max: 100,\n      customRules: {\n        \"/auth/signin\": {\n          window: 10,\n          max: 3,\n        },\n        \"/auth/signup\": {\n          window: 10,\n          max: 3,\n        },\n      },\n    },\n    plugins: [\n      admin({\n        adminRoles: [\"admin\"],\n        defaultRole: \"user\",\n      }),\n      captcha({\n        provider: \"cloudflare-turnstile\",\n        secretKey: env.CLOUDFLARE_TURNSTILE_SECRET_KEY ?? \"\",\n        endpoints: [\n          \"/auth/signin\",\n          \"/auth/signup\",\n          \"/auth/forget-password\",\n          \"/auth/reset-password\",\n          \"/auth/update-password\",\n        ],\n      }),\n      magicLink({\n        sendMagicLink: async ({ email, url }, request) => {\n          await sendEmail(env, {\n            to: email,\n            subject: \"Sign in to your account\",\n            html: `\n              <h2>Sign in to your account</h2>\n              <p>Click the button below to sign in to your account:</p>\n              <a href=\"${url}\" style=\"display: inline-block; padding: 12px 24px; background-color: #000; color: #fff; text-decoration: none; border-radius: 6px;\">Sign In</a>\n              <p>Or copy and paste this link: ${url}</p>\n              <p>This link expires in 10 minutes.</p>\n            `,\n            text: `Sign in to your account\\n\\nClick the link below to sign in:\\n${url}\\n\\nThis link expires in 10 minutes.`,\n          });\n        },\n        expiresIn: 10 * 60,\n        rateLimit: {\n          max: 10,\n          window: 10 * 60,\n        },\n        disableSignUp: true,\n      }),\n    ],\n  });\n};",
      "type": "registry:lib",
      "target": "lib/create-auth.ts"
    },
    {
      "path": "src/registry/new-york/blocks/hono-cloudflare-better-auth/hono/create-db.ts",
      "content": "import { Env } from \"./env\";\nimport { drizzle } from \"drizzle-orm/postgres-js\";\nimport { createDatabase } from \"./lib/adapters/kysely-adapter\";\nimport postgres from \"postgres\";\n\n// Create Drizzle client (default option)\nexport function createDbClient(env: Env) {\n  const connectionString = env.HYPERDRIVE?.connectionString;\n\n  if (!connectionString) {\n    throw new Error(\"HYPERDRIVE connection string is not set\");\n  }\n\n  // Disable prefetch as it is not supported for \"Transaction\" pool mode\n  const client = postgres(connectionString, { max: 5 });\n  return drizzle(client);\n}\n\n// Alternative: Create Kysely database (simpler option)\nexport function createKyselyDb(env: Env) {\n  return createDatabase(env);\n}\n",
      "type": "registry:lib",
      "target": "lib/create-db.ts"
    },
    {
      "path": "src/registry/new-york/blocks/hono-cloudflare-better-auth/hono/auth.ts",
      "content": "import { betterAuth } from \"better-auth\";\nimport { admin, captcha, magicLink } from \"better-auth/plugins\";\nimport { Pool } from \"pg\";\nimport { drizzle } from \"drizzle-orm/node-postgres\";\nimport { drizzleAdapter } from \"better-auth/adapters/drizzle\";\nimport * as schema from \"./auth-schema\";\n\nconst pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle(pool, { schema });\n\nexport const auth = betterAuth({\n  database: drizzleAdapter(db, {\n    schema,\n    provider: \"pg\",\n    usePlural: true,\n    debugLogs: true,\n  }),\n  appName: \"App Name\",\n  user: {\n    changeEmail: {\n      enabled: true,\n      sendChangeEmailVerification: async ({ user, newEmail, url, token }) => {\n        console.log(user, newEmail, url, token);\n      },\n    },\n    deleteUser: {\n      enabled: true,\n      sendDeleteAccountVerification: async ({ user, url, token }) => {\n        console.log(user, url, token);\n      },\n      beforeDelete: async (user) => {\n        console.log(user);\n      },\n      afterDelete: async () => {},\n    },\n  },\n  session: {\n    expiresIn: 60 * 60 * 24 * 90, // 90 days\n    preserveSessionInDatabase: true,\n    cookieCache: {\n      enabled: true,\n      maxAge: 5 * 60,\n    },\n  },\n  emailAndPassword: {\n    enabled: true,\n    requireEmailVerification: true,\n    minPasswordLength: 8,\n    autoSignIn: true,\n    sendResetPassword: async ({ user, url, token }) => {\n      console.log(user, url, token);\n    },\n    resetPasswordTokenExpiresIn: 600, // 10 minutes\n  },\n  advanced: {\n    cookiePrefix: \"appname\",\n    useSecureCookies: true,\n    crossSubDomainCookies: {\n      enabled: true,\n      domains: [\".appname.com\", \".appname.dev\", \"localhost\", \"127.0.0.1\"],\n    },\n    defaultCookieAttributes: {\n      secure: true,\n      httpOnly: true,\n      sameSite: \"none\",\n      partitioned: true,\n    },\n    database: {\n      generateId: false,\n    },\n  },\n  baseURL: \"https://appname.com\",\n  emailVerification: {\n    sendVerificationEmail: async ({ user, url, token }) => {\n      console.log(user, url, token);\n    },\n    sendOnSignUp: true,\n    autoSignInAfterVerification: true,\n    expiresIn: 600, // 10 minutes\n  },\n  databaseHooks: {\n    user: {\n      create: {\n        before: async (user) => {\n          // Modify user data before creation\n          return { data: { ...user } };\n        },\n        after: async () => {\n          // Create organization for user, so they have their personal workspace\n        },\n      },\n      update: {\n        before: async (userData) => {\n          // Modify user data before update\n          return { data: { ...userData, updatedAt: new Date() } };\n        },\n        after: async () => {\n          // Perform actions after user update\n        },\n      },\n    },\n    session: {\n      // Session hooks\n    },\n    account: {\n      // Account hooks\n    },\n    verification: {\n      // Verification hooks\n    },\n  },\n  trustedOrigins: [\n    \"https://appname.com\",\n    \"https://app.appname.com\",\n    \"https://appname.dev\",\n    \"https://app.appname.dev\",\n    \"http://localhost:3000\",\n    \"http://127.0.0.1:3000\",\n    \"http://localhost:3001\",\n    \"http://127.0.0.1:3001\",\n  ],\n  rateLimit: {\n    window: 60,\n    max: 100,\n    customRules: {\n      \"/auth/signin\": {\n        window: 10,\n        max: 3,\n      },\n      \"/auth/signup\": {\n        window: 10,\n        max: 3,\n      },\n    },\n  },\n  plugins: [\n    admin({\n      adminRoles: [\"admin\"],\n      defaultRole: \"user\",\n    }),\n    captcha({\n      provider: \"cloudflare-turnstile\",\n      secretKey: process.env.CLOUDFLARE_TURNSTILE_SECRET_KEY ?? \"Forgot to set\",\n      endpoints: [\n        \"/auth/signin\",\n        \"/auth/signup\",\n        \"/auth/forget-password\",\n        \"/auth/reset-password\",\n        \"/auth/update-password\",\n      ],\n    }),\n    magicLink({\n      sendMagicLink: async (data, request) => {\n        console.log(data, request);\n      },\n      expiresIn: 10 * 60,\n      rateLimit: {\n        max: 10,\n        window: 10 * 60,\n      },\n      disableSignUp: true,\n    }),\n  ],\n});\n",
      "type": "registry:lib",
      "target": "lib/auth.ts"
    },
    {
      "path": "src/registry/new-york/blocks/hono-cloudflare-better-auth/hono/index.ts",
      "content": "import { getAuth } from \"./use-auth\";\nimport { Hono } from \"hono\";\nimport { every } from \"hono/combine\";\nimport { cors } from \"hono/cors\";\nimport { logger } from \"hono/logger\";\nimport type { Env } from \"./env\";\nimport { auth } from \"./auth\";\n\ntype AuthInstance = ReturnType<typeof getAuth>;\ntype BetterAuthSession = {\n  user: typeof auth.$Infer.Session.user | null;\n  session: typeof auth.$Infer.Session.session | null;\n};\n\nconst app = new Hono<{\n  Bindings: Env;\n  Variables: BetterAuthSession & {\n    auth: AuthInstance;\n  };\n}>({\n  strict: false,\n});\n\napp.use(\"*\", async (c, next) => {\n  const auth = getAuth(c.env);\n  c.set(\"auth\", auth);\n  await next();\n});\n\napp.use(\"*\", async (c, next) => {\n  const auth = c.get(\"auth\");\n  try {\n    const sessionResult = (await auth.api.getSession({\n      headers: c.req.raw.headers,\n    })) as BetterAuthSession | null;\n\n    if (!sessionResult) {\n      c.set(\"user\", null);\n      c.set(\"session\", null);\n    } else {\n      c.set(\"user\", sessionResult.user);\n      c.set(\"session\", sessionResult.session);\n    }\n  } catch (error) {\n    console.error(\"Error getting session:\", error);\n    c.set(\"user\", null);\n    c.set(\"session\", null);\n  }\n  await next();\n});\n\napp.use(\"*\", async (c, next) => {\n  const middleware = every(\n    cors({\n      origin: (origin, ctx = c) => {\n        const corsOriginsString = ctx.env.CORS_ORIGINS;\n        const allowedOrigins = corsOriginsString.split(\",\");\n\n        if (allowedOrigins.includes(origin) || allowedOrigins.includes(\"*\")) {\n          return origin;\n        }\n\n        if (!origin && process.env.NODE_ENV === \"development\") {\n          return \"*\";\n        }\n\n        return undefined;\n      },\n      allowMethods: [\"POST\", \"GET\", \"OPTIONS\"],\n      allowHeaders: [\n        \"Content-Type\",\n        \"Authorization\",\n        \"Accept\",\n        \"x-captcha-response\",\n      ],\n      // exposeHeaders: [\"Content-Length\", \"X-Kuma-Revision\"],\n      maxAge: 600,\n      credentials: true,\n    }),\n    logger()\n    // bearerAuth({ token: c.env.BEARER_TOKEN })\n    // If all conditions are met, rateLimit will not execute.\n    // cloudflareRateLimiter({\n    //   rateLimitBinding(c) {\n    //     return c.env.RATE_LIMITER;\n    //   },\n    //   keyGenerator: (c) => c.req.header(\"cf-connecting-ip\") ?? \"anonymous\",\n    // })\n  );\n  await middleware(c, next);\n});\n\napp.on([\"POST\", \"GET\"], \"/api/auth/*\", (c) => {\n  const auth = c.get(\"auth\");\n  return auth.handler(c.req.raw);\n});\n\napp.get(\"/session\", async (c) => {\n  const session = c.get(\"session\");\n  const user = c.get(\"user\");\n\n  if (!user) return c.body(null, 401);\n\n  return c.json({\n    session,\n    user,\n  });\n});\n\napp.onError((err, c) => {\n  console.error(err);\n  return c.text(\"API Error\", 500);\n});\n\nexport default app;\n",
      "type": "registry:lib",
      "target": "index.ts"
    },
    {
      "path": "src/registry/new-york/blocks/hono-cloudflare-better-auth/hono/wrangler.jsonc",
      "content": "{\n  \"compatibility_date\": \"2025-05-07\",\n  \"compatibility_flags\": [\"nodejs_compat\"],\n  \"main\": \"src/index.ts\",\n  \"minify\": true,\n  \"name\": \"btm-api\",\n  \"hyperdrive\": [\n    {\n      \"binding\": \"HYPERDRIVE\",\n      \"id\": \"1aeb3ce1375240429eda0959fec69ec9\",\n      \"localConnectionString\": \"postgres://postgres:postgres@localhost:54322/postgres\"\n    }\n  ],\n  \"r2_buckets\": [\n    {\n      \"binding\": \"AUDIO_BUCKET\",\n      \"bucket_name\": \"music\"\n    }\n  ],\n  \"env\": {\n    \"production\": {\n      \"name\": \"btm-api-prod\",\n      \"route\": \"api.blacktoastmusic.com/*\"\n    },\n    \"staging\": {\n      \"name\": \"btm-api-staging\",\n      \"route\": \"api.blacktoastdev.com/*\"\n    }\n  },\n  \"observability\": {\n    \"enabled\": true\n  },\n  \"upload_source_maps\": true,\n  \"placement\": {\n    \"mode\": \"smart\"\n  },\n  \"unsafe\": {\n    \"bindings\": [\n      {\n        \"name\": \"GENERAL_RATE_LIMITER\",\n        \"namespace_id\": \"1001\",\n        \"type\": \"ratelimit\",\n        \"simple\": {\n          \"limit\": 60,\n          \"period\": 60\n        }\n      },\n      {\n        \"name\": \"SEARCH_RATE_LIMITER\",\n        \"namespace_id\": \"1002\",\n        \"type\": \"ratelimit\",\n        \"simple\": {\n          \"limit\": 120,\n          \"period\": 60\n        }\n      },\n      {\n        \"name\": \"AUDIO_CONVERSION_RATE_LIMITER\",\n        \"namespace_id\": \"1003\",\n        \"type\": \"ratelimit\",\n        \"simple\": {\n          \"limit\": 5,\n          \"period\": 60\n        }\n      },\n      {\n        \"name\": \"STREAMING_RATE_LIMITER\",\n        \"namespace_id\": \"1004\",\n        \"type\": \"ratelimit\",\n        \"simple\": {\n          \"limit\": 12,\n          \"period\": 60\n        }\n      }\n    ]\n  }\n}\n",
      "type": "registry:lib",
      "target": "wrangler.jsonc"
    },
    {
      "path": "src/registry/new-york/blocks/hono-cloudflare-better-auth/hono/.dev.vars.example",
      "content": "BETTER_AUTH_SECRET= \"\"\nBETTER_AUTH_URL= \"\"\nCORS_ORIGINS= \"\"\nCLOUDFLARE_TURNSTILE_SECRET_KEY= \"\"\nEMAIL_FROM_ADDRESS= \"\"\nRESEND_API_KEY= \"\"",
      "type": "registry:lib",
      "target": ".dev.vars.example"
    },
    {
      "path": "src/registry/new-york/blocks/hono-cloudflare-better-auth/hono/use-auth.ts",
      "content": "import { Env } from \"./env\";\nimport { createDbClient, createKyselyDb } from \"./create-db\";\nimport { createBetterAuth, type BetterAuthInstance } from \"./create-auth\";\n\nexport function getAuth(env: Env): BetterAuthInstance {\n  // Use Drizzle (default) - includes schema and relations\n  const db = createDbClient(env);\n  \n  // Alternative: Use Kysely (simpler) - Better Auth handles schema automatically\n  // const db = createKyselyDb(env);\n\n  return createBetterAuth(db, env);\n}\n",
      "type": "registry:lib",
      "target": "lib/use-auth.ts"
    },
    {
      "path": "src/registry/new-york/blocks/hono-cloudflare-better-auth/hono/lib/email/resend.ts",
      "content": "import { Resend } from \"resend\";\nimport type { Env } from \"@/registry/new-york/blocks/hono-cloudflare-better-auth/hono/env\";\n\nexport interface EmailOptions {\n  to: string;\n  subject: string;\n  html?: string;\n  text?: string;\n}\n\nexport async function sendEmail(\n  env: Env,\n  options: EmailOptions\n): Promise<void> {\n  if (!env.RESEND_API_KEY) {\n    console.error(\"RESEND_API_KEY not configured, email not sent:\", options);\n    return;\n  }\n\n  const resend = new Resend(env.RESEND_API_KEY);\n\n  try {\n    await resend.emails.send({\n      from: env.EMAIL_FROM_ADDRESS || \"noreply@example.com\",\n      to: options.to,\n      subject: options.subject,\n      html: options.html,\n      text: options.text ?? \"\",\n    });\n  } catch (error) {\n    console.error(\"Failed to send email:\", error);\n    throw new Error(\"Failed to send email\");\n  }\n}\n\n// Email templates\nexport const emailTemplates = {\n  verifyEmail: (url: string, name?: string) => ({\n    subject: \"Verify your email address\",\n    html: `\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <meta charset=\"utf-8\">\n          <title>Verify your email</title>\n          <style>\n            body {\n              font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n              line-height: 1.6;\n              color: #333;\n              max-width: 600px;\n              margin: 0 auto;\n              padding: 20px;\n            }\n            .button {\n              display: inline-block;\n              padding: 12px 24px;\n              background-color: #000;\n              color: #fff;\n              text-decoration: none;\n              border-radius: 6px;\n              margin: 20px 0;\n            }\n            .footer {\n              margin-top: 40px;\n              padding-top: 20px;\n              border-top: 1px solid #eee;\n              font-size: 14px;\n              color: #666;\n            }\n          </style>\n        </head>\n        <body>\n          <h2>Verify your email address</h2>\n          <p>Hi${name ? ` ${name}` : \"\"},</p>\n          <p>Please click the button below to verify your email address:</p>\n          <a href=\"${url}\" class=\"button\">Verify Email</a>\n          <p>Or copy and paste this link in your browser:</p>\n          <p style=\"word-break: break-all; color: #666;\">${url}</p>\n          <p>This link will expire in 24 hours.</p>\n          <div class=\"footer\">\n            <p>If you didn't create an account, you can safely ignore this email.</p>\n          </div>\n        </body>\n      </html>\n    `,\n    text: `\nVerify your email address\n\nHi${name ? ` ${name}` : \"\"},\n\nPlease click the link below to verify your email address:\n\n${url}\n\nThis link will expire in 24 hours.\n\nIf you didn't create an account, you can safely ignore this email.\n    `.trim(),\n  }),\n\n  resetPassword: (url: string, name?: string) => ({\n    subject: \"Reset your password\",\n    html: `\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <meta charset=\"utf-8\">\n          <title>Reset your password</title>\n          <style>\n            body {\n              font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n              line-height: 1.6;\n              color: #333;\n              max-width: 600px;\n              margin: 0 auto;\n              padding: 20px;\n            }\n            .button {\n              display: inline-block;\n              padding: 12px 24px;\n              background-color: #000;\n              color: #fff;\n              text-decoration: none;\n              border-radius: 6px;\n              margin: 20px 0;\n            }\n            .footer {\n              margin-top: 40px;\n              padding-top: 20px;\n              border-top: 1px solid #eee;\n              font-size: 14px;\n              color: #666;\n            }\n          </style>\n        </head>\n        <body>\n          <h2>Reset your password</h2>\n          <p>Hi${name ? ` ${name}` : \"\"},</p>\n          <p>You requested to reset your password. Click the button below to continue:</p>\n          <a href=\"${url}\" class=\"button\">Reset Password</a>\n          <p>Or copy and paste this link in your browser:</p>\n          <p style=\"word-break: break-all; color: #666;\">${url}</p>\n          <p>This link will expire in 1 hour.</p>\n          <div class=\"footer\">\n            <p>If you didn't request a password reset, you can safely ignore this email.</p>\n          </div>\n        </body>\n      </html>\n    `,\n    text: `\nReset your password\n\nHi${name ? ` ${name}` : \"\"},\n\nYou requested to reset your password. Click the link below to continue:\n\n${url}\n\nThis link will expire in 1 hour.\n\nIf you didn't request a password reset, you can safely ignore this email.\n    `.trim(),\n  }),\n\n  changeEmail: (url: string, newEmail: string, name?: string) => ({\n    subject: \"Confirm your email change\",\n    html: `\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <meta charset=\"utf-8\">\n          <title>Confirm email change</title>\n          <style>\n            body {\n              font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n              line-height: 1.6;\n              color: #333;\n              max-width: 600px;\n              margin: 0 auto;\n              padding: 20px;\n            }\n            .button {\n              display: inline-block;\n              padding: 12px 24px;\n              background-color: #000;\n              color: #fff;\n              text-decoration: none;\n              border-radius: 6px;\n              margin: 20px 0;\n            }\n            .footer {\n              margin-top: 40px;\n              padding-top: 20px;\n              border-top: 1px solid #eee;\n              font-size: 14px;\n              color: #666;\n            }\n          </style>\n        </head>\n        <body>\n          <h2>Confirm your email change</h2>\n          <p>Hi${name ? ` ${name}` : \"\"},</p>\n          <p>You requested to change your email address to: <strong>${newEmail}</strong></p>\n          <p>Please click the button below to confirm this change:</p>\n          <a href=\"${url}\" class=\"button\">Confirm Email Change</a>\n          <p>Or copy and paste this link in your browser:</p>\n          <p style=\"word-break: break-all; color: #666;\">${url}</p>\n          <p>This link will expire in 24 hours.</p>\n          <div class=\"footer\">\n            <p>If you didn't request this change, please secure your account immediately.</p>\n          </div>\n        </body>\n      </html>\n    `,\n    text: `\nConfirm your email change\n\nHi${name ? ` ${name}` : \"\"},\n\nYou requested to change your email address to: ${newEmail}\n\nPlease click the link below to confirm this change:\n\n${url}\n\nThis link will expire in 24 hours.\n\nIf you didn't request this change, please secure your account immediately.\n    `.trim(),\n  }),\n};\n",
      "type": "registry:lib",
      "target": "lib/email/resend.ts"
    },
    {
      "path": "src/registry/new-york/blocks/hono-cloudflare-better-auth/hono/lib/adapters/drizzle-adapter.ts",
      "content": "import { drizzleAdapter } from \"better-auth/adapters/drizzle\";\nimport { drizzle } from \"drizzle-orm/postgres-js\";\nimport postgres from \"postgres\";\nimport * as schema from \"../../db-schema\";\nimport type { Env } from \"../../env\";\n\nexport function createDrizzleAdapter(env: Env) {\n  // Create postgres client\n  const client = postgres(env.HYPERDRIVE.connectionString, {\n    prepare: false, // Required for Hyperdrive\n  });\n  \n  // Create drizzle instance\n  const db = drizzle(client, {\n    schema,\n    logger: process.env.NODE_ENV === \"development\",\n  });\n  \n  // Return the adapter configuration\n  return {\n    adapter: drizzleAdapter(db, {\n      provider: \"pg\",\n      schema,\n      usePlural: true,\n    }),\n    db, // Export db instance for custom queries\n  };\n}",
      "type": "registry:lib",
      "target": "lib/adapters/drizzle-adapter.ts"
    },
    {
      "path": "src/registry/new-york/blocks/hono-cloudflare-better-auth/hono/lib/adapters/kysely-adapter.ts",
      "content": "import { PostgresDialect } from \"kysely\";\nimport { Pool } from \"pg\";\nimport type { Env } from \"../../env\";\n\n// Simple database connection for Better Auth\n// Better Auth handles the Kysely adapter internally by default\nexport function createDatabase(env: Env) {\n  return new PostgresDialect({\n    pool: new Pool({\n      connectionString: env.HYPERDRIVE.connectionString,\n      // Hyperdrive handles connection pooling\n      max: 1,\n    }),\n  });\n}\n",
      "type": "registry:lib",
      "target": "lib/adapters/kysely-adapter.ts"
    },
    {
      "path": "src/registry/new-york/blocks/hono-cloudflare-better-auth/hono/lib/adapters/index.ts",
      "content": "import { createDrizzleAdapter } from \"./drizzle-adapter\";\nimport { createDatabase } from \"./kysely-adapter\";\nimport type { Env } from \"../../env\";\n\nexport type DatabaseAdapter = \"drizzle\" | \"kysely\";\n\nexport interface AdapterConfig {\n  type: DatabaseAdapter;\n  env: Env;\n}\n\nexport function createDatabaseAdapter(config: AdapterConfig) {\n  switch (config.type) {\n    case \"drizzle\":\n      return createDrizzleAdapter(config.env);\n    case \"kysely\":\n      // For Kysely, we need to return a consistent structure\n      const db = createDatabase(config.env);\n      return {\n        adapter: db, // Kysely dialect is used directly as adapter\n        db, // Also provide db reference\n      };\n    default:\n      throw new Error(`Unsupported database adapter: ${config.type}`);\n  }\n}\n\n// Re-export individual adapters for direct use\nexport { createDrizzleAdapter, createDatabase as createKyselyAdapter };\n",
      "type": "registry:lib",
      "target": "lib/adapters/index.ts"
    },
    {
      "path": "src/registry/new-york/blocks/hono-cloudflare-better-auth/hono/lib/create-auth-modular.ts",
      "content": "import { betterAuth } from \"better-auth\";\nimport { admin, captcha, magicLink } from \"better-auth/plugins\";\nimport { sendEmail, emailTemplates } from \"./email/resend\";\nimport { createDatabaseAdapter, type DatabaseAdapter } from \"./adapters\";\nimport type { Env } from \"../env\";\n\nexport type BetterAuthInstance = ReturnType<typeof betterAuth>;\n\nexport interface CreateAuthConfig {\n  env: Env;\n  adapterType?: DatabaseAdapter;\n}\n\nexport const createBetterAuthModular = ({\n  env,\n  adapterType = \"drizzle\",\n}: // eslint-disable-next-line @typescript-eslint/no-explicit-any\nCreateAuthConfig): { auth: BetterAuthInstance; db: any } => {\n  // Create database adapter\n  const { adapter, db } = createDatabaseAdapter({ type: adapterType, env });\n\n  const FROM_EMAIL = env.EMAIL_FROM_ADDRESS ?? \"team@mail.appname.com\";\n\n  const auth = betterAuth({\n    database: adapter,\n    appName: \"App Name\",\n    user: {\n      changeEmail: {\n        enabled: true,\n        sendChangeEmailVerification: async ({ user, newEmail, url, token }) => {\n          const template = emailTemplates.changeEmail(url, newEmail, user.name);\n          await sendEmail(env, {\n            to: newEmail,\n            ...template,\n          });\n        },\n      },\n      deleteUser: {\n        enabled: true,\n        sendDeleteAccountVerification: async ({ user, url, token }) => {\n          await sendEmail(env, {\n            to: user.email,\n            subject: \"Confirm account deletion\",\n            html: `\n              <h2>Confirm Account Deletion</h2>\n              <p>Hi ${user.name || \"there\"},</p>\n              <p>You requested to delete your account. This action cannot be undone.</p>\n              <p>Click the link below to confirm:</p>\n              <a href=\"${url}\">Delete Account</a>\n              <p>This link expires in 24 hours.</p>\n            `,\n            text: `Confirm account deletion\\n\\nHi ${\n              user.name || \"there\"\n            },\\n\\nYou requested to delete your account. This action cannot be undone.\\n\\nClick the link below to confirm:\\n${url}\\n\\nThis link expires in 24 hours.`,\n          });\n        },\n        beforeDelete: async (user) => {\n          console.log(\"Deleting user:\", user.id);\n          // Add any cleanup logic here\n        },\n        afterDelete: async () => {\n          // Add any post-deletion logic here\n        },\n      },\n    },\n    session: {\n      expiresIn: 60 * 60 * 24 * 90, // 90 days\n      preserveSessionInDatabase: true,\n      cookieCache: {\n        enabled: true,\n        maxAge: 5 * 60,\n      },\n    },\n    emailAndPassword: {\n      enabled: true,\n      requireEmailVerification: true,\n      minPasswordLength: 8,\n      autoSignIn: true,\n      sendResetPassword: async ({ user, url, token }) => {\n        const template = emailTemplates.resetPassword(url, user.name);\n        await sendEmail(env, {\n          to: user.email,\n          ...template,\n        });\n      },\n      resetPasswordTokenExpiresIn: 600, // 10 minutes\n    },\n    advanced: {\n      cookiePrefix: \"appname\",\n      useSecureCookies: true,\n      crossSubDomainCookies: {\n        enabled: true,\n        domains: [\".appname.com\", \".appname.dev\", \"localhost\", \"127.0.0.1\"],\n      },\n      defaultCookieAttributes: {\n        secure: true,\n        httpOnly: true,\n        sameSite: \"none\",\n        partitioned: true,\n      },\n      database: {\n        generateId: false,\n      },\n    },\n    baseURL: env.BETTER_AUTH_URL || \"https://appname.com\",\n    emailVerification: {\n      sendVerificationEmail: async ({ user, url, token }) => {\n        const template = emailTemplates.verifyEmail(url, user.name);\n        await sendEmail(env, {\n          to: user.email,\n          ...template,\n        });\n      },\n      sendOnSignUp: true,\n      autoSignInAfterVerification: true,\n      expiresIn: 600, // 10 minutes\n    },\n    databaseHooks: {\n      user: {\n        create: {\n          before: async (user) => {\n            // Modify user data before creation\n            return { data: { ...user } };\n          },\n          after: async () => {\n            // Create organization for user, so they have their personal workspace\n          },\n        },\n        update: {\n          before: async (userData) => {\n            // Modify user data before update\n            return { data: { ...userData, updatedAt: new Date() } };\n          },\n          after: async () => {\n            // Perform actions after user update\n          },\n        },\n      },\n      session: {\n        // Session hooks\n      },\n      account: {\n        // Account hooks\n      },\n      verification: {\n        // Verification hooks\n      },\n    },\n    trustedOrigins: env.CORS_ORIGINS?.split(\",\") || [\n      \"https://appname.com\",\n      \"https://app.appname.com\",\n      \"https://appname.dev\",\n      \"https://app.appname.dev\",\n      \"http://localhost:3000\",\n      \"http://127.0.0.1:3000\",\n      \"http://localhost:3001\",\n      \"http://127.0.0.1:3001\",\n    ],\n    rateLimit: {\n      window: 60,\n      max: 100,\n      customRules: {\n        \"/auth/signin\": {\n          window: 10,\n          max: 3,\n        },\n        \"/auth/signup\": {\n          window: 10,\n          max: 3,\n        },\n      },\n    },\n    plugins: [\n      admin({\n        adminRoles: [\"admin\"],\n        defaultRole: \"user\",\n      }),\n      captcha({\n        provider: \"cloudflare-turnstile\",\n        secretKey: env.CLOUDFLARE_TURNSTILE_SECRET_KEY ?? \"\",\n        endpoints: [\n          \"/auth/signin\",\n          \"/auth/signup\",\n          \"/auth/forget-password\",\n          \"/auth/reset-password\",\n          \"/auth/update-password\",\n        ],\n      }),\n      magicLink({\n        sendMagicLink: async ({ email, url }, request) => {\n          await sendEmail(env, {\n            to: email,\n            subject: \"Sign in to your account\",\n            html: `\n              <h2>Sign in to your account</h2>\n              <p>Click the button below to sign in to your account:</p>\n              <a href=\"${url}\" style=\"display: inline-block; padding: 12px 24px; background-color: #000; color: #fff; text-decoration: none; border-radius: 6px;\">Sign In</a>\n              <p>Or copy and paste this link: ${url}</p>\n              <p>This link expires in 10 minutes.</p>\n            `,\n            text: `Sign in to your account\\n\\nClick the link below to sign in:\\n${url}\\n\\nThis link expires in 10 minutes.`,\n          });\n        },\n        expiresIn: 10 * 60,\n        rateLimit: {\n          max: 10,\n          window: 10 * 60,\n        },\n        disableSignUp: true,\n      }),\n    ],\n  });\n\n  return { auth, db };\n};\n",
      "type": "registry:lib",
      "target": "lib/create-auth-modular.ts"
    }
  ],
  "categories": [
    "auth",
    "cookies",
    "fullstack",
    "hono",
    "cloudflare",
    "workers",
    "better-auth"
  ]
}